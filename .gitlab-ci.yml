stages: [test, deploy, report]

# Regras básicas: roda em push e MR
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

# Use "tags" para rodar num Runner local (Mac)
.default_job_template: &defaults
  stage: test
  tags: ['mac'] # <-- importante: batizar seu runner com essa tag
  before_script:
    - node -v && npm -v
    - npm ci || npm i
    # - mkdir -p errorShots
    - mkdir -p allure-results errorShots
  artifacts:
    when: always
    expire_in: 7 days
    paths:
      - allure-results/
      - allure-report/
      - errorShots/
      - wdio.log
    reports:
      junit: allure-results/*.xml # se usar JUnit também

# ANDROID
android_tests:
  <<: *defaults
  variables:
    WDIO_LOG_LEVEL: info
  before_script:
    - node -v && npm -v
    - npm ci || npm i
    - mkdir -p errorShots
    # mata Appium na porta 4723, se tiver sobrado
    - npx kill-port 4723 || true
    # garante AVDs e sobe o emulador (troque o nome do AVD se for diferente)
    - $ANDROID_HOME/emulator/emulator -list-avds
    - $ANDROID_HOME/emulator/emulator -avd "$ANDROID_AVD" -no-window -no-audio -no-boot-anim -gpu swiftshader_indirect -no-snapshot &
    - adb wait-for-device
    - bash -lc 'until [[ "$(adb shell getprop sys.boot_completed 2>/dev/null | tr -d "\r")" == "1" ]]; do echo "Aguardando boot do Android..."; sleep 2; done; adb shell input keyevent 82 || true'
  script:
    # Rode tudo ou só um spec com a var SPEC_PATTERN (opcional)
    - if [[ -n "$SPEC_PATTERN" ]]; then npm run android -- --spec "$SPEC_PATTERN"; else npm run android; fi
  after_script:
    - npx allure generate --clean allure-results -o allure-report || true

# IOS (precisa de Runner em macOS com Xcode/Simuladores)
ios_tests:
  <<: *defaults
  rules:
    - if: $RUN_IOS == "1" # rode iOS quando quiser (variável)
    - when: manual # ou manualmente nos pipelines
  before_script:
    - node -v && npm -v
    - npm ci || npm i
    - mkdir -p errorShots
    - npx kill-port 4723 || true
    - xcrun simctl list devices
    # sobe o simulador (troque o nome se necessário)
    - xcrun simctl boot "$IOS_SIM" || true
    - xcrun simctl bootstatus "$IOS_SIM" -b
  script:
    - if [[ -n "$SPEC_PATTERN" ]]; then npm run ios -- --spec "$SPEC_PATTERN"; else npm run ios; fi
  after_script:
    - npx allure generate --clean allure-results -o allure-report || true

# NOVO STAGE: Geração do Relatório
generate_allure_report:
  stage: report
  tags: ['mac']
  needs: ['android_tests'] # ou ['android_tests', 'ios_tests']
  script:
    - npm install -g allure-commandline
    - allure generate --clean allure-results -o allure-report
  artifacts:
    paths:
      - allure-report/
    expire_in: 30 days
# Publica o Allure no GitLab Pages
# pages:
#   stage: deploy
#   tags: ['mac']
#   needs: ['generate_allure_report'] # adicione "ios_tests" se quiser depender dos dois
#   script:
#     - mkdir -p public
#     - cp -r allure-report/* public/
#     # - if [[ -d "allure-report" ]]; then cp -r allure-report/* public/; else echo "Sem allure-report"; fi
#   artifacts:
#     paths: [public]
#   rules:
#     - if: $CI_COMMIT_BRANCH == "main"
